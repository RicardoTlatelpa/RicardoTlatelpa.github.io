{"version":3,"sources":["Button.js","OperatorButton.js","decimalCount.js","maxNum.js","Board.js","algorithms.js","handleDecimal.js","setNegative.js","App.js","serviceWorker.js","index.js"],"names":["Button","className","onClick","props","addValue","value","this","Component","OperatorButton","addOperator","decimalCount","number","test","toString","indexOf","split","pop","length","toFixed","maxNum","slice","Board","state","display","inputs","operator","numberClicked","operClicked","maxLength","handleClick","bind","handleOperator","handleRestart","handleEquals","handleDot","handleNegative","setState","total","input","str","opr","input1","parseFloat","parseInt","input2","doMath","newNum","num","negative","newN","unshift","join","shift","setNegative","onChange","handleChangeInput","type","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35f15479.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./styles/Button.css\"\n\n\nexport default class Button extends Component{\n    render(){\n        return(\n            <button className = 'numberButton' onClick = {() => this.props.addValue(this.props.value)}>{this.props.value}</button>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './styles/OperButton.css';\n\n\nclass OperatorButton extends Component{\n    render(){\n        return(\n            <button className = 'OperButton' onClick = {() => this.props.addOperator(this.props.value)}>{this.props.value}</button>\n        )\n    }\n\n}\n\n\n\nexport default OperatorButton;","export const decimalCount = (number) =>{\n  let test = number.toString();\n   if(test.indexOf('.') === -1){\n     return number\n   } \n  let decimalCount = test.split('.').pop().length;\n   if(decimalCount > 3){\n     let num = number.toFixed(3);\n      return num.toString();\n    }\n   return number; \n    \n}\n  \n  \n  ","export const maxNum = (number) =>{\n\n    let test = number.toString();\n  \n  return test.length > 12 ? test.slice(0,12) : test\n\n}\n\n","import React, {Component} from \"react\";\nimport \"./styles/Board.css\";\nimport Button from \"./Button\";\nimport OperatorButton from \"./OperatorButton\";\nimport { doMath } from './algorithms';\nimport { handleDecimal } from './handleDecimal';\nimport { setNegative } from './setNegative';\nimport { maxNum } from './maxNum';\n\nexport default class Board extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n           display: '',\n           inputs: '',\n           operator:'',\n           numberClicked: false,\n           operClicked: false,\n           maxLength: false\n           }  \n        this.handleClick = this.handleClick.bind(this);\n        this.handleOperator = this.handleOperator.bind(this);\n        this.handleRestart = this.handleRestart.bind(this);\n        this.handleEquals = this.handleEquals.bind(this);\n        this.handleDot = this.handleDot.bind(this);\n        this.handleNegative = this.handleNegative.bind(this);\n        \n    }\n\n    \n    handleRestart(){\n        this.setState({\n            display: '',\n            inputs: '',\n            numberClicked: false,\n            operClicked: false,\n            operator: ''\n        })\n\n    }\n    \n    /*\n    updates the display and inptuts state. Handles if opertor is clicked \n    Passed maxNum function to handle userInput \n\n    */\n    handleClick(number){\n        if(this.state.operClicked){//assuming a user has clicked a sequence of numbers or just by default wants zero\n            this.setState({\n                inputs: this.state.display,\n                display: '',\n                \n            })   \n        }\n        // if the if case is not caught just handle updating \n        this.setState( state => ({\n            display: maxNum(state.display += number),\n            numberClicked: true,\n            operClicked: false\n        }))       \n    }\n    //updates the input and display and operator state\n    handleOperator(operator){\n        if(this.state.operator && this.state.inputs){\n            this.handleEquals()\n        }\n        this.setState({\n            operator: operator,\n            operClicked: true,\n            numberClicked: false\n        })\n    }\n    //equals passes arguments to the doMath function\n    handleEquals(){\n        let total = doMath(this.state.inputs, this.state.display, this.state.operator);\n        this.setState({\n            display: total,\n            numberClicked: false,\n            inputs: '',\n            operator: ''\n        })\n    }\n    handleDot(){\n        // add 0 to decimal if there's no . to the left of it\n        if(handleDecimal(this.state.display) === false){\n            this.setState(state => ({\n                display: state.display += '.'\n            }))\n        }else{\n        this.setState({\n            display: this.state.display\n        })\n        }\n    }\n    handleNegative(){\n        let newNum = setNegative(this.state.display);\n        this.setState({\n            display: newNum\n        })\n    }\n    render(){    \n        return(\n            <div className = \"Board\">\n                 <input \n                 onChange = {this.handleChangeInput}\n                 value = {this.state.display} \n                 type = 'text'\n                 disabled\n                 className = \"calculatorScreen\"\n                 /> \n            <div className = \"Board-main\">\n                <OperatorButton addOperator = {this.handleOperator} value = \"+\"/>  \n                <OperatorButton addOperator = {this.handleOperator}  value = \"-\"/>\n                <OperatorButton addOperator = {this.handleOperator} value = \"x\"/>\n                <OperatorButton addOperator = {this.handleOperator} value = \"รท\"/> \n                <button onClick = {this.handleNegative} className = \"negative-btn\">+/-</button>\n                <Button addValue = {this.handleClick} value = \"1\"/>\n                <Button addValue = {this.handleClick} value = \"2\"/>\n                <Button addValue = {this.handleClick} value = \"3\"/>\n                <Button addValue = {this.handleClick} value = \"4\"/>\n                <Button addValue = {this.handleClick} value = \"5\"/>\n                <Button addValue = {this.handleClick} value = \"6\"/>\n                <Button addValue = {this.handleClick} value = \"7\"/>\n                <Button addValue = {this.handleClick} value = \"8\"/>\n                <Button addValue = {this.handleClick} value = \"9\"/>\n                <Button addValue = {this.handleClick} value = \"0\"/>\n                <button className = \"restart-btn\" onClick = {this.handleDot}>.</button>\n                \n                <button onClick = {this.handleRestart} className = \"restart-btn\">AC</button>\n                <button onClick = {this.handleEquals}  className = \"equals-btn\">=</button>     \n                               \n                </div>\n\n            </div>\n        )\n    }\n}","import { decimalCount } from './decimalCount';\nexport const doMath = (input , str , opr) => {\n    let input1 = parseFloat(input) || parseInt('0');\n    let input2 = parseFloat(str) || parseInt('0');\n    let total;\n    \n    switch(opr){\n        case 'x':\n            total = input1 * input2;\n            return decimalCount(total)\n        case '+':\n            total = input1 + input2;\n            return decimalCount(total)\n        case '-':\n            total = input1 - input2;\n            return decimalCount(total)\n        case 'รท':\n            total = input1/input2\n            return decimalCount(total)\n        default:\n        return str || ''\n    }\n}","export const handleDecimal = (str) => {\n    let toString = str.toString();\n    return toString.indexOf('.') !== -1\n  }","export const setNegative = (num) =>{\n    let negative = num.toString()\n    //take in a number add a negative if it's positive. if the number is negative return a positive\n    if(negative.indexOf('-') === -1){\n        let newN = negative.split('');\n        newN.unshift('-');\n        return newN.join('');\n    \n    }\n    else{\n        let newN = negative.split('')\n        newN.shift()\n        return newN.join('');\n    }\n}\n    \n    ","import React from 'react';\nimport Board from \"./Board\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}