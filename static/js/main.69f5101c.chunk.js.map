{"version":3,"sources":["Button.js","OperatorButton.js","decimalCount.js","Board.js","algorithms.js","handleDecimal.js","App.js","serviceWorker.js","index.js"],"names":["Button","className","onClick","props","addValue","value","this","Component","OperatorButton","addOperator","decimalCount","number","test","toString","indexOf","split","pop","length","toFixed","Board","state","display","inputs","operator","numberClicked","operClicked","maxLength","handleClick","bind","handleOperator","handleRestart","handleEquals","handleDot","handleChangeInput","setState","total","input","str","opr","input1","parseFloat","parseInt","input2","doMath","onChange","type","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69f5101c.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./styles/Button.css\"\n\n\nexport default class Button extends Component{\n    render(){\n        return(\n            <button className = 'numberButton' onClick = {() => this.props.addValue(this.props.value)}>{this.props.value}</button>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './styles/OperButton.css';\n\n\nclass OperatorButton extends Component{\n    render(){\n        return(\n            <button className = 'OperButton' onClick = {() => this.props.addOperator(this.props.value)}>{this.props.value}</button>\n        )\n    }\n\n}\n\n\n\nexport default OperatorButton;","export const decimalCount = (number) =>{\n  let test = number.toString();\n   if(test.indexOf('.') === -1){\n     return number\n   } \n  let decimalCount = test.split('.').pop().length;\n   if(decimalCount > 3){\n      return number.toFixed(3)\n    }\n   return number; \n    \n}\n  \n  \n  ","import React, {Component} from \"react\";\nimport \"./styles/Board.css\";\nimport Button from \"./Button\";\nimport OperatorButton from \"./OperatorButton\";\nimport { doMath } from './algorithms';\nimport { handleDecimal } from './handleDecimal';\n\nexport default class Board extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n           display: '',\n           inputs: '',\n           operator:'',\n           numberClicked: false,\n           operClicked: false,\n           maxLength: false\n           }\n        \n        this.handleClick = this.handleClick.bind(this);\n        this.handleOperator = this.handleOperator.bind(this);\n        this.handleRestart = this.handleRestart.bind(this);\n        this.handleEquals = this.handleEquals.bind(this);\n        this.handleDot = this.handleDot.bind(this);\n        this.handleChangeInput = this.handleChangeInput.bind(this);\n    }\n   \n    \n    handleRestart(){\n        this.setState({\n            display: '',\n            inputs: '',\n            numberClicked: false,\n            operClicked: false,\n            operator: ''\n        })\n\n    }\n    \n    //updates the display\n    handleClick(number){\n        if(this.state.operClicked){\n            this.setState({\n                inputs: this.state.display,\n                display: '',        \n            })\n        }\n        \n        this.setState( state => ({\n            display: state.display += number, \n            numberClicked: true,\n            operClicked: false\n        }))\n    \n    }\n    //updates the input and display and operator state\n    handleOperator(operator){\n        if(this.state.operator && this.state.inputs){\n            this.handleEquals()\n        }\n        this.setState({\n            operator: operator,\n            operClicked: true,\n            numberClicked: false\n        })\n    }\n    //equals passes arguments to the doMath function\n    handleEquals(){\n        let total = doMath(this.state.inputs, this.state.display, this.state.operator);\n        this.setState({\n            display: total,\n            numberClicked: false,\n            inputs: '',\n            operator: ''\n        })\n    }\n\n    handleDot(){\n        // add 0 to decimal if there's no . to the left of it\n        if(handleDecimal(this.state.display) === false){\n            this.setState(state => ({\n                display: state.display += '.'\n            }))\n        }else{\n        this.setState({\n            display: this.state.display\n        })\n    }\n   \n    }\n\n    handleChangeInput(){\n        \n    };\n\n    render(){    \n        return(\n            <div className = \"Board\">\n                 <input \n                 onChange = {this.handleChangeInput}\n                 value = {this.state.display} \n                 type = 'text'\n                 disabled\n                 className = \"calculatorScreen\"\n                 /> \n            <div className = \"Board-main\">\n                <OperatorButton addOperator = {this.handleOperator} value = \"+\"/>\n                <OperatorButton addOperator = {this.handleOperator}  value = \"-\"/>\n                <OperatorButton addOperator = {this.handleOperator} value = \"x\"/>\n                <OperatorButton addOperator = {this.handleOperator} value = \"รท\"/> \n                <Button addValue = {this.handleClick} value = \"1\"/>\n                <Button addValue = {this.handleClick} value = \"2\"/>\n                <Button addValue = {this.handleClick} value = \"3\"/>\n                <Button addValue = {this.handleClick} value = \"4\"/>\n                <Button addValue = {this.handleClick} value = \"5\"/>\n                <Button addValue = {this.handleClick} value = \"6\"/>\n                <Button addValue = {this.handleClick} value = \"7\"/>\n                <Button addValue = {this.handleClick} value = \"8\"/>\n                <Button addValue = {this.handleClick} value = \"9\"/>\n                <Button addValue = {this.handleClick} value = \"0\"/>\n                <button className = \"restart-btn\" onClick = {this.handleDot}>.</button>\n                <button onClick = {this.handleRestart} className = \"restart-btn\">AC</button>\n                <button onClick = {this.handleEquals}  className = \"equals-btn\">=</button>     \n                               \n                </div>\n\n            </div>\n        )\n    }\n}","import { decimalCount } from './decimalCount';\nexport const doMath = (input , str , opr) => {\n    let input1 = parseFloat(input) || parseInt('0');\n    let input2 = parseFloat(str) || parseInt('0');\n    let total;\n    \n    switch(opr){\n        case 'x':\n            total = input1 * input2;\n            return decimalCount(total)\n        case '+':\n            total = input1 + input2;\n            return decimalCount(total)\n        case '-':\n            total = input1 - input2;\n            return decimalCount(total)\n        case 'รท':\n            total = input1/input2\n            return decimalCount(total)\n        default:\n        return str || ''\n    }\n}","export const handleDecimal = (str) => {\n    return str.indexOf('.') !== -1 ? true: false \n  }","import React from 'react';\nimport Board from \"./Board\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}